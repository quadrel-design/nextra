diff --git a/dist/changesets-assemble-release-plan.cjs.js b/dist/changesets-assemble-release-plan.cjs.js
index 4f7b5e5b37bb05874a5c1d8e583e29d4a9593ecf..118d3eaaa2e0615b6813f48fe2618bfebd82a5ca 100644
--- a/dist/changesets-assemble-release-plan.cjs.js
+++ b/dist/changesets-assemble-release-plan.cjs.js
@@ -347,7 +347,7 @@ function shouldBumpMajor({
   // we check if it is a peerDependency because if it is, our dependent bump type might need to be major.
   return depType === "peerDependencies" && nextRelease.type !== "none" && nextRelease.type !== "patch" && ( // 1. If onlyUpdatePeerDependentsWhenOutOfRange set to true, bump major if the version is leaving the range.
   // 2. If onlyUpdatePeerDependentsWhenOutOfRange set to false, bump major regardless whether or not the version is leaving the range.
-  !onlyUpdatePeerDependentsWhenOutOfRange || !semverSatisfies__default["default"](incrementVersion(nextRelease, preInfo), versionRange)) && ( // bump major only if the dependent doesn't already has a major release.
+  !onlyUpdatePeerDependentsWhenOutOfRange) && ( // bump major only if the dependent doesn't already has a major release.
   !releases.has(dependent) || releases.has(dependent) && releases.get(dependent).type !== "major");
 }
 
@@ -444,7 +444,7 @@ function matchFixedConstraint(releases, packagesByName, config) {
 
 function getPreVersion(version) {
   let parsed = semverParse__default["default"](version);
-  let preVersion = parsed.prerelease[1] === undefined ? -1 : parsed.prerelease[1];
+  let preVersion = parsed?.prerelease[1] === undefined ? -1 : parsed.prerelease[1];
 
   if (typeof preVersion !== "number") {
     throw new errors.InternalError("preVersion is not a number");
