diff --git a/dist/assemble-release-plan.cjs.dev.js b/dist/assemble-release-plan.cjs.dev.js
index e1376ca756d69816f8c79637ee7b45161f092167..dba064deb138de4571e5663fb5a16972a57a7901 100644
--- a/dist/assemble-release-plan.cjs.dev.js
+++ b/dist/assemble-release-plan.cjs.dev.js
@@ -257,7 +257,7 @@ function shouldBumpMajor({
   // we check if it is a peerDependency because if it is, our dependent bump type might need to be major.
   return depType === "peerDependencies" && nextRelease.type !== "none" && nextRelease.type !== "patch" && ( // 1. If onlyUpdatePeerDependentsWhenOutOfRange set to true, bump major if the version is leaving the range.
   // 2. If onlyUpdatePeerDependentsWhenOutOfRange set to false, bump major regardless whether or not the version is leaving the range.
-  !onlyUpdatePeerDependentsWhenOutOfRange || !semverSatisfies__default['default'](incrementVersion(nextRelease, preInfo), versionRange)) && ( // bump major only if the dependent doesn't already has a major release.
+  !onlyUpdatePeerDependentsWhenOutOfRange) && ( // bump major only if the dependent doesn't already has a major release.
   !releases.has(dependent) || releases.has(dependent) && releases.get(dependent).type !== "major");
 }
 
@@ -436,7 +436,7 @@ function applyLinks(releases, packagesByName, linked) {
 
 function getPreVersion(version) {
   let parsed = semverParse__default['default'](version);
-  let preVersion = parsed.prerelease[1] === undefined ? -1 : parsed.prerelease[1];
+  let preVersion = parsed?.prerelease[1] === undefined ? -1 : parsed.prerelease[1];
 
   if (typeof preVersion !== "number") {
     throw new errors.InternalError("preVersion is not a number");
diff --git a/dist/assemble-release-plan.cjs.prod.js b/dist/assemble-release-plan.cjs.prod.js
index 3a83720644a94cdf6e62fa188a72c51c0384d00e..2313ee4afd511955ad537358cc90db4fc5b5ce47 100644
--- a/dist/assemble-release-plan.cjs.prod.js
+++ b/dist/assemble-release-plan.cjs.prod.js
@@ -130,7 +130,7 @@ function getDependencyVersionRanges(dependentPkgJSON, dependencyRelease) {
 }
 
 function shouldBumpMajor({dependent: dependent, depType: depType, versionRange: versionRange, releases: releases, nextRelease: nextRelease, preInfo: preInfo, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange}) {
-  return "peerDependencies" === depType && "none" !== nextRelease.type && "patch" !== nextRelease.type && (!onlyUpdatePeerDependentsWhenOutOfRange || !semverSatisfies__default.default(incrementVersion(nextRelease, preInfo), versionRange)) && (!releases.has(dependent) || releases.has(dependent) && "major" !== releases.get(dependent).type);
+  return "peerDependencies" === depType && "none" !== nextRelease.type && "patch" !== nextRelease.type && !onlyUpdatePeerDependentsWhenOutOfRange && (!releases.has(dependent) || releases.has(dependent) && "major" !== releases.get(dependent).type);
 }
 
 function flattenReleases(changesets, packagesByName, ignoredPackages) {
@@ -214,7 +214,7 @@ function applyLinks(releases, packagesByName, linked) {
 }
 
 function getPreVersion(version) {
-  let parsed = semverParse__default.default(version), preVersion = void 0 === parsed.prerelease[1] ? -1 : parsed.prerelease[1];
+  let parsed = semverParse__default.default(version), preVersion = void 0 === parsed?.prerelease[1] ? -1 : parsed.prerelease[1];
   if ("number" != typeof preVersion) throw new errors.InternalError("preVersion is not a number");
   return preVersion++, preVersion;
 }
